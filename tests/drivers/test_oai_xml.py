import pytest

from sickle import Sickle, OAIResponse
from dlme_airflow.drivers.oai_xml import OaiXmlSource

# These tests ensure that the oai_dc and mods records that are returned by ListRecords
# calls are getting processed correctly. Rather than depending on live OAI-PMH
# servers some effort is made to mock the HTTP response that Sickle.harvest
# returns. The content is conditional based on the type of records that are
# being tested.


class MockHttpResponse(object):
    """Mocking the HTTP response generated by requests.get."""

    def __init__(self, text):
        self.text = text
        self.content = text.encode("utf8")


def make_harvest(path):
    """Given a path to an XML file this will return a function that itself returns an
    OAIResponse that uses the content from the supplied XML file.
    """
    text = open(path, "r").read()
    resp = MockHttpResponse(text)
    return lambda *args, **kwargs: OAIResponse(resp, {"verb": "ListRecords"})


@pytest.fixture
def mock_oai_dc(monkeypatch):
    harvest = make_harvest("tests/data/xml/oai-dc.xml")
    monkeypatch.setattr(Sickle, "harvest", harvest)


@pytest.fixture
def mock_mods(monkeypatch):
    harvest = make_harvest("tests/data/xml/oai-mods.xml")
    monkeypatch.setattr(Sickle, "harvest", harvest)


@pytest.fixture
def mock_marc21(monkeypatch):
    harvest = make_harvest("tests/data/xml/oai-marc21.xml")
    monkeypatch.setattr(Sickle, "harvest", harvest)


def test_oai_dc(mock_oai_dc):
    oai = OaiXmlSource("https://example.org", "oai_dc")
    df = oai.read()
    assert len(df) == 100, "expected number of rows"
    assert len(df.columns) == 14, "expected number of columns"
    assert "title" in df.columns


def test_mods(mock_mods):
    oai = OaiXmlSource("https://example.org", "mods_no_ocr")
    df = oai.read()
    assert len(df) == 10, "expected number of rows"
    assert len(df.columns) == 18, "expected number of columns"
    assert "location_url" in df.columns, "hierarchical data encoded in header"


def test_marc21(mock_marc21):
    oai = OaiXmlSource("https://example.org", "marc21")
    df = oai.read()
    assert len(df) == 182, "expected number of rows"
    assert len(df.columns) == 92, "expected number of columns"
    assert "245_a" in df.columns, "marc field 245 subfield a extracted"
