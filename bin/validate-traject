#!/usr/bin/env python3

# A utility for validating the traject mapping to ensure that it catches all fields
# present in the input data and doesn't attempt to map fields that are not present.

import argparse
import glob
import json
import logging
import os
import sys

def get_paths_and_trajects(provider):
    with open(f"{os.getcwd()}/../dlme-transform/config/metadata_mapping.json") as f:
        metatdata_mapping = json.load(f)
    for i in metatdata_mapping:
        for p in i.get('paths'):
            if provider == p.split('/')[0]:
                return i.get('paths'), i.get('trajects')

def get_data(paths):
    files = []
    for p in paths:
        files.extend(glob.glob(f"{os.getcwd()}/working/{p}/*.json", recursive=True))
        files.extend(glob.glob(f"{os.getcwd()}/working/{p}/**/*.json", recursive=True))
    return list(set(files))

def main(opts):
    data_path = opts.data
    provider = data_path.split('/')[0]
    paths, trajects = get_paths_and_trajects(provider)
    files = get_data(paths)

    # Get fields present in the input file
    harvested_fields = []
    for file in files:
        with open(file) as f:
            json_data = json.load(f)
            for i in json_data:
                harvested_fields.extend(list(i.keys()))

    # Get fields mapped in the traject config
    mapped_fields = []
    ignored_fields = []
    for traject in trajects:
        with open(f"{os.getcwd()}/../dlme-transform/traject_configs/{traject}") as t:
            lines = t.readlines()
            for line in lines:
                if "extract_json" in line:
                    mapped_fields.append(line.split("extract_json('")[-1].split("')")[0].split('[')[0].replace('.', ''))
                if line.startswith('##'):
                    ignored_fields.append(line.replace('## ', ''))

    missed_fields = set(ignored_fields).difference(set(harvested_fields).difference(set(mapped_fields))).difference(set(ignored_fields))
    imaginary_fields = list(set(mapped_fields).difference(set(harvested_fields)))

    with open('traject-validation.txt', 'w') as out:
        out.write('Fields present in the harvested data that are not mapped:\n')
        for i in missed_fields:
            out.write('    - '+i+'\n')
        out.write('\nFields mapped in the Traject config that are not present in the harvested data:\n')
        for i in imaginary_fields:
            out.write('    - '+i+'\n')
        out.write('\nIntentionally ignored fields:\n')
        for i in ignored_fields:
            out.write('    - '+i+'\n')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Merge data from a DLME provider harvest")
    parser.add_argument('data', help="The same DLME data path passed to the traject config")
    opts = parser.parse_args()

    main(opts)
